package com.researchers.tictactoe;

import android.content.Context;
import android.os.Environment;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Clues {
    private Context context; // Added context field

    private FileWriter logger;
    private JsonObject data;
    private JsonArray array;
    private File clueFile;
    private File storageDir;

    // Constructor that accepts a Context parameter
    public Clues(Context context) {
        this.context = context;
    }

    public void SendLog(String TAG, String extend) {
        // Updated to use the stored context
        storageDir = getDir();

        clueFile = new File(storageDir, "MoriartyClues.json");
        data = new JsonObject();
        data.addProperty("Action", TAG);
        data.addProperty("ActionType", "benign");
        data.addProperty("Details", extend);
        data.addProperty("UUID", System.currentTimeMillis());
        if (MainActivity.isEvil) {
            data.addProperty("SessionType", "malicious");
        } else {
            data.addProperty("SessionType", "benign");
        }
        data.addProperty("Version", MainActivity.version);
        data.addProperty("SessionID", MainActivity.sessionID);
        try {
            logger = new FileWriter(clueFile, true);
            if (clueFile.length() > 0) {
                logger.write("," + data.toString());
                logger.close();
            } else {
                logger.write(data.toString());
                logger.close();
            }
            MainActivity.sessionID += 1;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void SendLog(String TAG, String extend, String actionType, boolean inc) {
        // Updated to use the stored context
        storageDir = getDir();
        int sessID;
        if (inc) {
            MainActivity.sessionID += 1;
        }
        sessID = MainActivity.sessionID;
        clueFile = new File(storageDir, "MoriartyClues.json");
        data = new JsonObject();
        data.addProperty("Action", TAG);
        data.addProperty("ActionType", actionType);
        data.addProperty("Details", extend);
        data.addProperty("UUID", System.currentTimeMillis());
        if (MainActivity.isEvil) {
            data.addProperty("SessionType", "malicious");
        } else {
            data.addProperty("SessionType", "benign");
        }
        data.addProperty("Version", MainActivity.version);
        data.addProperty("SessionID", sessID);
        try {
            logger = new FileWriter(clueFile, true);
            if (clueFile.length() > 0) {
                logger.write("," + data.toString());
                logger.close();
            } else {
                logger.write(data.toString());
                logger.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void writeToFile() {
        try {
            logger = new FileWriter(clueFile, true);
            logger.write(array.toString());
            logger.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Updated getDir method to use the stored context
    public File getDir() {
        File externalFilesDir = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);

        if (externalFilesDir != null) {
            File file = new File(externalFilesDir, "Moriarty_V14");
//            if (!file.exists()) {
//                file.mkdirs();
//            }
            if (!file.exists()) {
                if (file.mkdirs()) {
                    System.out.println("Directory created successfully");
                } else {
                    System.err.println("Failed to create directory");
                    // Handle error appropriately
                }
            } else {
                System.out.println("Directory already exists");
            }
            return file;
        } else {
            return null;
        }
    }
}
